// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestPermissions_PostAPIIndexV1Updatepermissions(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/updatepermissions")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.UpdatePermissions(ctx, components.UpdatePermissionsRequest{
		Datasource:  "<value>",
		Permissions: components.DocumentPermissionsDefinition{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Indexuser(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/indexuser")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.IndexUser(ctx, components.IndexUserRequest{
		Datasource: "<value>",
		User: components.DatasourceUserDefinition{
			Email: "Elroy38@gmail.com",
			Name:  "<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Bulkindexusers(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/bulkindexusers")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.BulkIndexUsers(ctx, components.BulkIndexUsersRequest{
		UploadID:   "<id>",
		Datasource: "<value>",
		Users: []components.DatasourceUserDefinition{
			components.DatasourceUserDefinition{
				Email: "Nola85@hotmail.com",
				Name:  "<value>",
			},
			components.DatasourceUserDefinition{
				Email: "Francisca44@hotmail.com",
				Name:  "<value>",
			},
			components.DatasourceUserDefinition{
				Email: "Georgiana_Fadel-Boyle@yahoo.com",
				Name:  "<value>",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Indexgroup(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/indexgroup")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.IndexGroup(ctx, components.IndexGroupRequest{
		Datasource: "<value>",
		Group: components.DatasourceGroupDefinition{
			Name: "<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Bulkindexgroups(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/bulkindexgroups")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.BulkIndexGroups(ctx, components.BulkIndexGroupsRequest{
		UploadID:   "<id>",
		Datasource: "<value>",
		Groups: []components.DatasourceGroupDefinition{
			components.DatasourceGroupDefinition{
				Name: "<value>",
			},
			components.DatasourceGroupDefinition{
				Name: "<value>",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Indexmembership(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/indexmembership")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.IndexMembership(ctx, components.IndexMembershipRequest{
		Datasource: "<value>",
		Membership: components.DatasourceMembershipDefinition{
			GroupName: "<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Bulkindexmemberships(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/bulkindexmemberships")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.BulkIndexMemberships(ctx, components.BulkIndexMembershipsRequest{
		UploadID:   "<id>",
		Datasource: "<value>",
		Memberships: []components.DatasourceBulkMembershipDefinition{
			components.DatasourceBulkMembershipDefinition{},
			components.DatasourceBulkMembershipDefinition{},
			components.DatasourceBulkMembershipDefinition{},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Processallmemberships(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/processallmemberships")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.ProcessMemberships(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Deleteuser(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/deleteuser")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.DeleteUser(ctx, components.DeleteUserRequest{
		Datasource: "<value>",
		Email:      "Estrella.Robel56@gmail.com",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Deletegroup(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/deletegroup")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.DeleteGroup(ctx, components.DeleteGroupRequest{
		Datasource: "<value>",
		GroupName:  "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Deletemembership(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/deletemembership")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.DeleteMembership(ctx, components.DeleteMembershipRequest{
		Datasource: "<value>",
		Membership: components.DatasourceMembershipDefinition{
			GroupName: "<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestPermissions_PostAPIIndexV1Betausers(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/betausers")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Permissions.AuthorizeBetaUsers(ctx, components.GreenlistUsersRequest{
		Datasource: "<value>",
		Emails: []string{
			"Margaret94@gmail.com",
			"Jerel_Wilkinson39@yahoo.com",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
