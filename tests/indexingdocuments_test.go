// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestIndexingDocuments_PostAPIIndexV1Indexdocument(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/indexdocument")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Documents.AddOrUpdate(ctx, components.IndexDocumentRequest{
		Document: components.DocumentDefinition{
			Datasource: "<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestIndexingDocuments_PostAPIIndexV1Indexdocuments(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/indexdocuments")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Documents.Index(ctx, components.IndexDocumentsRequest{
		Datasource: "<value>",
		Documents: []components.DocumentDefinition{
			components.DocumentDefinition{
				Datasource: "<value>",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestIndexingDocuments_PostAPIIndexV1Bulkindexdocuments(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/bulkindexdocuments")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Documents.BulkIndex(ctx, components.BulkIndexDocumentsRequest{
		UploadID:   "<id>",
		Datasource: "<value>",
		Documents: []components.DocumentDefinition{
			components.DocumentDefinition{
				Datasource: "<value>",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestIndexingDocuments_PostAPIIndexV1Processalldocuments(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/processalldocuments")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Documents.ProcessAll(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestIndexingDocuments_PostAPIIndexV1Deletedocument(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/deletedocument")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Documents.Delete(ctx, components.DeleteDocumentRequest{
		Datasource: "<value>",
		ObjectType: "<value>",
		ID:         "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
