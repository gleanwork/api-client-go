// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/gleanwork/api-client-go/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestChat_ChatDefaultExample(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("chat-defaultExample")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Start(ctx, components.ChatRequest{
		Messages: []components.ChatMessage{
			components.ChatMessage{
				Fragments: []components.ChatMessageFragment{
					components.ChatMessageFragment{
						Text: apiclientgo.String("What are the company holidays this year?"),
					},
				},
			},
		},
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_ChatGptAgentExample(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("chat-gptAgentExample")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Start(ctx, components.ChatRequest{
		Messages: []components.ChatMessage{
			components.ChatMessage{
				Fragments: []components.ChatMessageFragment{
					components.ChatMessageFragment{
						Text: apiclientgo.String("Who was the first person to land on the moon?"),
					},
				},
			},
		},
		AgentConfig: &components.AgentConfig{
			Agent: components.AgentEnumGpt.ToPointer(),
		},
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_ChatStreamingExample(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("chat-streamingExample")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Start(ctx, components.ChatRequest{
		Messages:      []components.ChatMessage{},
		TimeoutMillis: apiclientgo.Int64(30000),
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_ChatUpdateResponse(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("chat-updateResponse")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Start(ctx, components.ChatRequest{
		Messages: []components.ChatMessage{
			components.ChatMessage{
				Citations: []components.ChatMessageCitation{
					components.ChatMessageCitation{
						SourceDocument: &components.Document{
							Metadata: &components.DocumentMetadata{
								Datasource: apiclientgo.String("datasource"),
								ObjectType: apiclientgo.String("Feature Request"),
								Container:  apiclientgo.String("container"),
								ParentID:   apiclientgo.String("JIRA_EN-1337"),
								MimeType:   apiclientgo.String("mimeType"),
								DocumentID: apiclientgo.String("documentId"),
								CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
								UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
								Author: &components.Person{
									Name:         "name",
									ObfuscatedID: "<id>",
								},
								Components: []string{
									"Backend",
									"Networking",
								},
								Status: apiclientgo.String("[\"Done\"]"),
								CustomData: map[string]components.CustomDataValue{
									"someCustomField": components.CustomDataValue{},
								},
							},
						},
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						SourcePerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								TextRange: &components.TextRange{
									StartIndex: 956313,
									Document:   &components.Document{},
								},
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
				},
				Fragments: []components.ChatMessageFragment{
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{
								Person: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								Customer: &components.Customer{
									ID: "<id>",
									Company: components.Company{
										Name:     "<value>",
										Location: apiclientgo.String("New York City"),
										Industry: apiclientgo.String("Finances"),
										About:    apiclientgo.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
									},
									Poc:   []components.Person{},
									Notes: apiclientgo.String("CIO is interested in trying out the product."),
								},
								Team: &components.Team{
									ID:      "<id>",
									Name:    "<value>",
									Members: []components.PersonToTeamRelationship{},
									DatasourceProfiles: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
								},
								CustomEntity: &components.CustomEntity{
									Roles: []components.UserRoleSpecification{},
								},
								Answer: &components.Answer{
									ID:       3,
									DocID:    apiclientgo.String("ANSWERS_answer_3"),
									Question: apiclientgo.String("Why is the sky blue?"),
									BodyText: apiclientgo.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
									AudienceFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									AddedRoles:   []components.UserRoleSpecification{},
									RemovedRoles: []components.UserRoleSpecification{},
									CombinedAnswerText: &components.StructuredText{
										Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
										StructuredList: []components.StructuredTextItem{},
									},
									Likes: &components.AnswerLikes{
										LikedBy:     []components.AnswerLike{},
										LikedByUser: false,
										NumLikes:    798102,
									},
									UpdatedBy: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									Verification: &components.Verification{
										State: components.StateVerified,
										Metadata: &components.VerificationMetadata{
											LastVerifier: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
											},
											Reminders: []components.Reminder{},
											LastReminder: &components.Reminder{
												Assignee: components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												Requestor: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												RemindAt: 961967,
											},
											CandidateVerifiers: []components.Person{},
										},
									},
									Board: &components.AnswerBoard{
										Name:        "<value>",
										Description: "not meh surprisingly too like embed dreamily verbally casement with",
										AudienceFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: apiclientgo.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        apiclientgo.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        apiclientgo.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										ID: 756840,
										Creator: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
									},
									Collections: []components.Collection{},
								},
								ExtractedQnA: &components.ExtractedQnA{
									QuestionResult: &components.SearchResult{
										Title:        apiclientgo.String("title"),
										URL:          "https://example.com/foo/bar",
										NativeAppURL: apiclientgo.String("slack://foo/bar"),
									},
								},
								Meeting: &components.Meeting{
									Attendees: &components.CalendarAttendees{
										People: []components.CalendarAttendee{},
									},
								},
								Collection: &components.Collection{
									Name:        "<value>",
									Description: "daily forecast rapidly urgently slipper meh",
									AudienceFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									ID:       308354,
									Children: []components.Collection{},
								},
								AnswerBoard: &components.AnswerBoard{
									Name:        "<value>",
									Description: "frantically highlight thunderbolt defrag aside stitcher furthermore zealous",
									AudienceFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									ID: 87875,
								},
								Code: &components.Code{
									RepoName: apiclientgo.String("scio"),
									FileName: apiclientgo.String("README.md"),
								},
								QuerySuggestions: &components.QuerySuggestionList{
									Suggestions: []components.QuerySuggestion{},
								},
								RelatedDocuments: []components.RelatedDocuments{},
								RelatedQuestion: &components.RelatedQuestion{
									Ranges: []components.TextRange{},
								},
							},
							components.StructuredResult{},
						},
						QuerySuggestion: &components.QuerySuggestion{
							Query:      "app:github type:pull author:mortimer",
							Label:      apiclientgo.String("Mortimer's PRs"),
							Datasource: apiclientgo.String("github"),
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Jarrell_Hudson65",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Bertha.Koepp",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeAction,
								Name:               "<value>",
								DisplayName:        "Sheridan.Koss71",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
				},
			},
			components.ChatMessage{
				Citations: []components.ChatMessageCitation{
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
				},
				Fragments: []components.ChatMessageFragment{
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Zoe8",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeAction,
								Name:               "<value>",
								DisplayName:        "Caterina70",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
				},
			},
		},
		TimeoutMillis: apiclientgo.Int64(30000),
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_ChatCitationResponse(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("chat-citationResponse")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Start(ctx, components.ChatRequest{
		Messages: []components.ChatMessage{
			components.ChatMessage{
				Citations: []components.ChatMessageCitation{
					components.ChatMessageCitation{
						SourceDocument: &components.Document{
							Metadata: &components.DocumentMetadata{
								Datasource: apiclientgo.String("datasource"),
								ObjectType: apiclientgo.String("Feature Request"),
								Container:  apiclientgo.String("container"),
								ParentID:   apiclientgo.String("JIRA_EN-1337"),
								MimeType:   apiclientgo.String("mimeType"),
								DocumentID: apiclientgo.String("documentId"),
								CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
								UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
								Author: &components.Person{
									Name:         "name",
									ObfuscatedID: "<id>",
								},
								Components: []string{
									"Backend",
									"Networking",
								},
								Status: apiclientgo.String("[\"Done\"]"),
								CustomData: map[string]components.CustomDataValue{
									"someCustomField": components.CustomDataValue{},
								},
							},
						},
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						SourcePerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								TextRange: &components.TextRange{
									StartIndex: 585176,
									Document:   &components.Document{},
								},
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
				},
				Fragments: []components.ChatMessageFragment{
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{
								Person: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								Customer: &components.Customer{
									ID: "<id>",
									Company: components.Company{
										Name:     "<value>",
										Location: apiclientgo.String("New York City"),
										Industry: apiclientgo.String("Finances"),
										About:    apiclientgo.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
									},
									Poc:   []components.Person{},
									Notes: apiclientgo.String("CIO is interested in trying out the product."),
								},
								Team: &components.Team{
									ID:      "<id>",
									Name:    "<value>",
									Members: []components.PersonToTeamRelationship{},
									DatasourceProfiles: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
								},
								CustomEntity: &components.CustomEntity{
									Roles: []components.UserRoleSpecification{},
								},
								Answer: &components.Answer{
									ID:       3,
									DocID:    apiclientgo.String("ANSWERS_answer_3"),
									Question: apiclientgo.String("Why is the sky blue?"),
									BodyText: apiclientgo.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
									AudienceFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									AddedRoles:   []components.UserRoleSpecification{},
									RemovedRoles: []components.UserRoleSpecification{},
									CombinedAnswerText: &components.StructuredText{
										Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
										StructuredList: []components.StructuredTextItem{},
									},
									Likes: &components.AnswerLikes{
										LikedBy:     []components.AnswerLike{},
										LikedByUser: true,
										NumLikes:    294779,
									},
									UpdatedBy: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									Verification: &components.Verification{
										State: components.StateDeprecated,
										Metadata: &components.VerificationMetadata{
											LastVerifier: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
											},
											Reminders: []components.Reminder{},
											LastReminder: &components.Reminder{
												Assignee: components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												Requestor: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												RemindAt: 881610,
											},
											CandidateVerifiers: []components.Person{},
										},
									},
									Board: &components.AnswerBoard{
										Name:        "<value>",
										Description: "slip receptor fork",
										AudienceFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: apiclientgo.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        apiclientgo.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        apiclientgo.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										ID: 71022,
										Creator: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
									},
									Collections: []components.Collection{},
								},
								ExtractedQnA: &components.ExtractedQnA{
									QuestionResult: &components.SearchResult{
										Title:        apiclientgo.String("title"),
										URL:          "https://example.com/foo/bar",
										NativeAppURL: apiclientgo.String("slack://foo/bar"),
									},
								},
								Meeting: &components.Meeting{
									Attendees: &components.CalendarAttendees{
										People: []components.CalendarAttendee{},
									},
								},
								Collection: &components.Collection{
									Name:        "<value>",
									Description: "notarize equally hospitable",
									AudienceFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									ID:       889117,
									Children: []components.Collection{},
								},
								AnswerBoard: &components.AnswerBoard{
									Name:        "<value>",
									Description: "e-mail outstanding among voluntarily fooey badly beautifully",
									AudienceFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									ID: 900364,
								},
								Code: &components.Code{
									RepoName: apiclientgo.String("scio"),
									FileName: apiclientgo.String("README.md"),
								},
								QuerySuggestions: &components.QuerySuggestionList{
									Suggestions: []components.QuerySuggestion{},
								},
								RelatedDocuments: []components.RelatedDocuments{},
								RelatedQuestion: &components.RelatedQuestion{
									Ranges: []components.TextRange{},
								},
							},
						},
						QuerySuggestion: &components.QuerySuggestion{
							Query:      "app:github type:pull author:mortimer",
							Label:      apiclientgo.String("Mortimer's PRs"),
							Datasource: apiclientgo.String("github"),
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeAction,
								Name:               "<value>",
								DisplayName:        "Jamil_Koss",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Julien_Okuneva",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Eulalia31",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
				},
			},
			components.ChatMessage{
				Citations: []components.ChatMessageCitation{
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
					components.ChatMessageCitation{
						SourceFile: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						ReferenceRanges: []components.ReferenceRange{
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
							components.ReferenceRange{
								Snippets: []components.SearchResultSnippet{
									components.SearchResultSnippet{
										Snippet:  "snippet",
										MimeType: apiclientgo.String("mimeType"),
									},
								},
							},
						},
					},
				},
				Fragments: []components.ChatMessageFragment{
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Eladio82",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeAction,
								Name:               "<value>",
								DisplayName:        "Jeanne52",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
					components.ChatMessageFragment{
						StructuredResults: []components.StructuredResult{
							components.StructuredResult{},
						},
						File: &components.ChatFile{
							ID:   apiclientgo.String("FILE_1234"),
							URL:  apiclientgo.String("www.google.com"),
							Name: apiclientgo.String("sample.pdf"),
						},
						Action: &components.ToolInfo{
							Metadata: &components.ToolMetadata{
								Type:               components.ToolMetadataTypeRetrieval,
								Name:               "<value>",
								DisplayName:        "Naomie.Corkery",
								DisplayDescription: "<value>",
								ObjectName:         apiclientgo.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
							},
						},
					},
				},
			},
		},
		TimeoutMillis: apiclientgo.Int64(30000),
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Deleteallchats(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteallchats")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.DeleteAll(ctx, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Deletechats(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deletechats")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Delete(ctx, components.DeleteChatsRequest{
		Ids: []string{
			"<value>",
			"<value>",
		},
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Getchat(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getchat")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.Get(ctx, components.GetChatRequest{
		ID: "<id>",
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Listchats(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listchats")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.List(ctx, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Getchatapplication(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getchatapplication")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.GetApplication(ctx, components.GetChatApplicationRequest{
		ID: "<id>",
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Uploadchatfiles(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("uploadchatfiles")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.UploadFiles(ctx, components.UploadChatFilesRequest{
		Files: []components.File{},
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Getchatfiles(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getchatfiles")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.GetFiles(ctx, components.GetChatFilesRequest{
		FileIds: []string{
			"<value>",
			"<value>",
		},
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestChat_Deletechatfiles(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deletechatfiles")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Chat.DeleteFiles(ctx, components.DeleteChatFilesRequest{
		FileIds: []string{
			"<value>",
		},
	}, nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
