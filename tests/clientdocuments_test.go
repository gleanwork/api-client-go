// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestClientDocuments_Getdocpermissions(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getdocpermissions")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Documents.GetPermissions(ctx, components.GetDocPermissionsRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestClientDocuments_Getdocuments(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getdocuments")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Documents.Get(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestClientDocuments_Getdocumentsbyfacets(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getdocumentsbyfacets")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Documents.GetByFacets(ctx, &components.GetDocumentsByFacetsRequest{
		FilterSets: []components.FacetFilterSet{
			components.FacetFilterSet{
				Filters: []components.FacetFilter{
					components.FacetFilter{
						FieldName: apiclientgo.String("type"),
						Values: []components.FacetFilterValue{
							components.FacetFilterValue{
								Value:        apiclientgo.String("Spreadsheet"),
								RelationType: components.RelationTypeEquals.ToPointer(),
							},
							components.FacetFilterValue{
								Value:        apiclientgo.String("Presentation"),
								RelationType: components.RelationTypeEquals.ToPointer(),
							},
						},
					},
				},
			},
			components.FacetFilterSet{
				Filters: []components.FacetFilter{
					components.FacetFilter{
						FieldName: apiclientgo.String("type"),
						Values: []components.FacetFilterValue{
							components.FacetFilterValue{
								Value:        apiclientgo.String("Spreadsheet"),
								RelationType: components.RelationTypeEquals.ToPointer(),
							},
							components.FacetFilterValue{
								Value:        apiclientgo.String("Presentation"),
								RelationType: components.RelationTypeEquals.ToPointer(),
							},
						},
					},
				},
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
