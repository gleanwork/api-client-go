// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDatasources_PostAPIIndexV1Adddatasource(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/adddatasource")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Datasources.Add(ctx, components.CustomDatasourceConfig{
		Name:     "<value>",
		URLRegex: apiclientgo.String("https://example-company.datasource.com/.*"),
		Quicklinks: []components.Quicklink{
			components.Quicklink{
				IconConfig: &components.IconConfig{
					Color:    apiclientgo.String("#343CED"),
					Key:      apiclientgo.String("person_icon"),
					IconType: components.IconTypeGlyph.ToPointer(),
					Name:     apiclientgo.String("user"),
				},
			},
			components.Quicklink{
				IconConfig: &components.IconConfig{
					Color:    apiclientgo.String("#343CED"),
					Key:      apiclientgo.String("person_icon"),
					IconType: components.IconTypeGlyph.ToPointer(),
					Name:     apiclientgo.String("user"),
				},
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestDatasources_PostAPIIndexV1Getdatasourceconfig(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/getdatasourceconfig")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Indexing.Datasources.RetrieveConfig(ctx, components.GetDatasourceConfigRequest{
		Datasource: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
