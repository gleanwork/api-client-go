// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/gleanwork/api-client-go/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestAnswers_Createanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Answers.Create(ctx, components.CreateAnswerRequest{
		Data: components.AnswerCreationData{
			Question: apiclientgo.String("Why is the sky blue?"),
			BodyText: apiclientgo.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
			AudienceFilters: []components.FacetFilter{
				components.FacetFilter{
					FieldName: apiclientgo.String("type"),
					Values: []components.FacetFilterValue{
						components.FacetFilterValue{
							Value:        apiclientgo.String("Spreadsheet"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
						components.FacetFilterValue{
							Value:        apiclientgo.String("Presentation"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
					},
				},
			},
			AddedRoles: []components.UserRoleSpecification{
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:             "George Clooney",
						ObfuscatedID:     "abc123",
						RelatedDocuments: []components.RelatedDocuments{},
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{
								Suggestions: []components.QuerySuggestion{},
							},
							InviteInfo: &components.InviteInfo{
								Invites: []components.ChannelInviteInfo{},
							},
							CustomFields: []components.CustomFieldData{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleOwner,
				},
				components.UserRoleSpecification{
					Role: components.UserRoleVerifier,
				},
			},
			RemovedRoles: []components.UserRoleSpecification{
				components.UserRoleSpecification{
					Role: components.UserRoleVerifier,
				},
				components.UserRoleSpecification{
					Role: components.UserRoleAnswerModerator,
				},
				components.UserRoleSpecification{
					Role: components.UserRoleOwner,
				},
			},
			Roles: []components.UserRoleSpecification{
				components.UserRoleSpecification{
					Role: components.UserRoleAnswerModerator,
				},
				components.UserRoleSpecification{
					Role: components.UserRoleOwner,
				},
				components.UserRoleSpecification{
					Role: components.UserRoleVerifier,
				},
			},
			CombinedAnswerText: &components.StructuredTextMutableProperties{
				Text: "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
			},
		},
	}, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Deleteanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Answers.Delete(ctx, components.DeleteAnswerRequest{
		ID:    3,
		DocID: apiclientgo.String("ANSWERS_answer_3"),
	}, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Editanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("editanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Answers.Edit(ctx, components.EditAnswerRequest{
		ID:       3,
		DocID:    apiclientgo.String("ANSWERS_answer_3"),
		Question: apiclientgo.String("Why is the sky blue?"),
		BodyText: apiclientgo.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
		AudienceFilters: []components.FacetFilter{
			components.FacetFilter{
				FieldName: apiclientgo.String("type"),
				Values: []components.FacetFilterValue{
					components.FacetFilterValue{
						Value:        apiclientgo.String("Spreadsheet"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
					components.FacetFilterValue{
						Value:        apiclientgo.String("Presentation"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
				},
			},
		},
		AddedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:             "George Clooney",
					ObfuscatedID:     "abc123",
					RelatedDocuments: []components.RelatedDocuments{},
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      apiclientgo.String("Actor"),
						Department: apiclientgo.String("Movies"),
						Email:      apiclientgo.String("george@example.com"),
						Location:   apiclientgo.String("Hollywood, CA"),
						Phone:      apiclientgo.String("6505551234"),
						PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{
							Suggestions: []components.QuerySuggestion{},
						},
						InviteInfo: &components.InviteInfo{
							Invites: []components.ChannelInviteInfo{},
						},
						CustomFields: []components.CustomFieldData{},
						Badges: []components.Badge{
							components.Badge{
								Key:         apiclientgo.String("deployment_name_new_hire"),
								DisplayName: apiclientgo.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    apiclientgo.String("#343CED"),
									Key:      apiclientgo.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     apiclientgo.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleEditor,
			},
		},
		RemovedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Role: components.UserRoleEditor,
			},
		},
		Roles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Role: components.UserRoleAnswerModerator,
			},
			components.UserRoleSpecification{
				Role: components.UserRoleOwner,
			},
		},
		CombinedAnswerText: &components.StructuredTextMutableProperties{
			Text: "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
		},
	}, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Getanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Answers.Get(ctx, components.GetAnswerRequest{
		ID:    apiclientgo.Int64(3),
		DocID: apiclientgo.String("ANSWERS_answer_3"),
	}, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Listanswers(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listanswers")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Client.Answers.List(ctx, components.ListAnswersRequest{}, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
