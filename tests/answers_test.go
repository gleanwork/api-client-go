// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/gleanwork/api-client-go/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestAnswers_Createanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Client.Answers.Create(ctx, components.CreateAnswerRequest{
		Data: components.AnswerCreationData{
			Question: apiclientgo.String("Why is the sky blue?"),
			BodyText: apiclientgo.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
			AudienceFilters: []components.FacetFilter{
				components.FacetFilter{
					FieldName: apiclientgo.String("type"),
					Values: []components.FacetFilterValue{
						components.FacetFilterValue{
							Value:        apiclientgo.String("Spreadsheet"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
						components.FacetFilterValue{
							Value:        apiclientgo.String("Presentation"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
					},
				},
			},
			AddedRoles: []components.UserRoleSpecification{
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						RelatedDocuments: []components.RelatedDocuments{
							components.RelatedDocuments{
								QuerySuggestion: &components.QuerySuggestion{
									Query: "app:github type:pull author:mortimer",
									SearchProviderInfo: &components.SearchProviderInfo{
										Name:                  apiclientgo.String("Google"),
										SearchLinkURLTemplate: apiclientgo.String("https://www.google.com/search?q={query}&hl=en"),
									},
									Label:      apiclientgo.String("Mortimer's PRs"),
									Datasource: apiclientgo.String("github"),
									RequestOptions: &components.SearchRequestOptions{
										DatasourceFilter: apiclientgo.String("JIRA"),
										DatasourcesFilter: []string{
											"JIRA",
										},
										QueryOverridesFacetFilters: apiclientgo.Bool(true),
										FacetFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: apiclientgo.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        apiclientgo.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        apiclientgo.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										FacetFilterSets: []components.FacetFilterSet{
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: apiclientgo.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        apiclientgo.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        apiclientgo.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: apiclientgo.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        apiclientgo.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        apiclientgo.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
										},
										FacetBucketSize: 134365,
										AuthTokens: []components.AuthToken{
											components.AuthToken{
												AccessToken: "123abc",
												Datasource:  "gmail",
												Scope:       apiclientgo.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
												TokenType:   apiclientgo.String("Bearer"),
												AuthUser:    apiclientgo.String("1"),
											},
										},
									},
									Ranges: []components.TextRange{
										components.TextRange{
											StartIndex: 796474,
											Document: &components.Document{
												Metadata: &components.DocumentMetadata{
													Datasource: apiclientgo.String("datasource"),
													ObjectType: apiclientgo.String("Feature Request"),
													Container:  apiclientgo.String("container"),
													ParentID:   apiclientgo.String("JIRA_EN-1337"),
													MimeType:   apiclientgo.String("mimeType"),
													DocumentID: apiclientgo.String("documentId"),
													CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													Components: []string{
														"Backend",
														"Networking",
													},
													Status: apiclientgo.String("[\"Done\"]"),
													Pins: []components.PinDocument{
														components.PinDocument{
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: apiclientgo.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															DocumentID: "<id>",
														},
														components.PinDocument{
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: apiclientgo.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															DocumentID: "<id>",
														},
														components.PinDocument{
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: apiclientgo.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															DocumentID: "<id>",
														},
													},
													Collections: []components.Collection{
														components.Collection{
															Name:        "<value>",
															Description: "fumigate convection though zowie",
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: apiclientgo.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        apiclientgo.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															ID: 496323,
															Items: []components.CollectionItem{
																components.CollectionItem{
																	CollectionID: 782367,
																	ItemType:     components.CollectionItemItemTypeDocument,
																},
															},
														},
													},
													Interactions: &components.DocumentInteractions{
														Reacts: []components.Reaction{
															components.Reaction{},
															components.Reaction{},
															components.Reaction{},
														},
														Shares: []components.Share{
															components.Share{
																NumDaysAgo: 219974,
															},
															components.Share{
																NumDaysAgo: 449221,
															},
															components.Share{
																NumDaysAgo: 427887,
															},
														},
													},
													Verification: &components.Verification{
														State: components.StateVerified,
														Metadata: &components.VerificationMetadata{
															Reminders: []components.Reminder{
																components.Reminder{
																	Assignee: components.Person{
																		Name:         "George Clooney",
																		ObfuscatedID: "abc123",
																	},
																	RemindAt: 491427,
																},
															},
															LastReminder: &components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 490420,
															},
														},
													},
													CustomData: map[string]components.CustomDataValue{
														"someCustomField": components.CustomDataValue{},
													},
												},
											},
										},
									},
									InputDetails: &components.SearchRequestInputDetails{
										HasCopyPaste: apiclientgo.Bool(true),
									},
								},
								Results: []components.SearchResult{
									components.SearchResult{
										Title:        apiclientgo.String("title"),
										URL:          "https://example.com/foo/bar",
										NativeAppURL: apiclientgo.String("slack://foo/bar"),
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: apiclientgo.String("mimeType"),
											},
										},
									},
								},
							},
							components.RelatedDocuments{
								QuerySuggestion: &components.QuerySuggestion{
									Query: "app:github type:pull author:mortimer",
									SearchProviderInfo: &components.SearchProviderInfo{
										Name:                  apiclientgo.String("Google"),
										SearchLinkURLTemplate: apiclientgo.String("https://www.google.com/search?q={query}&hl=en"),
									},
									Label:      apiclientgo.String("Mortimer's PRs"),
									Datasource: apiclientgo.String("github"),
									RequestOptions: &components.SearchRequestOptions{
										DatasourceFilter: apiclientgo.String("JIRA"),
										DatasourcesFilter: []string{
											"JIRA",
										},
										QueryOverridesFacetFilters: apiclientgo.Bool(true),
										FacetFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: apiclientgo.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        apiclientgo.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        apiclientgo.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										FacetFilterSets: []components.FacetFilterSet{
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: apiclientgo.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        apiclientgo.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        apiclientgo.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: apiclientgo.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        apiclientgo.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        apiclientgo.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: apiclientgo.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        apiclientgo.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        apiclientgo.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
										},
										FacetBucketSize: 45416,
										AuthTokens: []components.AuthToken{
											components.AuthToken{
												AccessToken: "123abc",
												Datasource:  "gmail",
												Scope:       apiclientgo.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
												TokenType:   apiclientgo.String("Bearer"),
												AuthUser:    apiclientgo.String("1"),
											},
										},
									},
									InputDetails: &components.SearchRequestInputDetails{
										HasCopyPaste: apiclientgo.Bool(true),
									},
								},
							},
						},
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{
								Suggestions: []components.QuerySuggestion{
									components.QuerySuggestion{
										Query:      "app:github type:pull author:mortimer",
										Label:      apiclientgo.String("Mortimer's PRs"),
										Datasource: apiclientgo.String("github"),
									},
								},
							},
							InviteInfo: &components.InviteInfo{
								Invites: []components.ChannelInviteInfo{
									components.ChannelInviteInfo{},
								},
							},
							CustomFields: []components.CustomFieldData{
								components.CustomFieldData{
									Label: "<value>",
									Values: []components.CustomFieldValue{
										components.CreateCustomFieldValueCustomFieldValueStr(
											components.CustomFieldValueStr{},
										),
										components.CreateCustomFieldValueCustomFieldValueStr(
											components.CustomFieldValueStr{},
										),
									},
								},
								components.CustomFieldData{
									Label:  "<value>",
									Values: []components.CustomFieldValue{},
								},
							},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleOwner,
				},
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleVerifier,
				},
			},
			RemovedRoles: []components.UserRoleSpecification{
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleVerifier,
				},
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleAnswerModerator,
				},
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleOwner,
				},
			},
			Roles: []components.UserRoleSpecification{
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleAnswerModerator,
				},
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleOwner,
				},
				components.UserRoleSpecification{
					Person: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      apiclientgo.String("Actor"),
							Department: apiclientgo.String("Movies"),
							Email:      apiclientgo.String("george@example.com"),
							Location:   apiclientgo.String("Hollywood, CA"),
							Phone:      apiclientgo.String("6505551234"),
							PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         apiclientgo.String("deployment_name_new_hire"),
									DisplayName: apiclientgo.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    apiclientgo.String("#343CED"),
										Key:      apiclientgo.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     apiclientgo.String("user"),
									},
								},
							},
						},
					},
					Role: components.UserRoleVerifier,
				},
			},
			CombinedAnswerText: &components.StructuredTextMutableProperties{
				Text: "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Deleteanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Client.Answers.Delete(ctx, components.DeleteAnswerRequest{
		ID:    3,
		DocID: apiclientgo.String("ANSWERS_answer_3"),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Editanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("editanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Client.Answers.Update(ctx, components.EditAnswerRequest{
		ID:       3,
		DocID:    apiclientgo.String("ANSWERS_answer_3"),
		Question: apiclientgo.String("Why is the sky blue?"),
		BodyText: apiclientgo.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
		AudienceFilters: []components.FacetFilter{
			components.FacetFilter{
				FieldName: apiclientgo.String("type"),
				Values: []components.FacetFilterValue{
					components.FacetFilterValue{
						Value:        apiclientgo.String("Spreadsheet"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
					components.FacetFilterValue{
						Value:        apiclientgo.String("Presentation"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
				},
			},
		},
		AddedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					RelatedDocuments: []components.RelatedDocuments{
						components.RelatedDocuments{
							QuerySuggestion: &components.QuerySuggestion{
								Query: "app:github type:pull author:mortimer",
								SearchProviderInfo: &components.SearchProviderInfo{
									Name:                  apiclientgo.String("Google"),
									SearchLinkURLTemplate: apiclientgo.String("https://www.google.com/search?q={query}&hl=en"),
								},
								Label:      apiclientgo.String("Mortimer's PRs"),
								Datasource: apiclientgo.String("github"),
								RequestOptions: &components.SearchRequestOptions{
									DatasourceFilter: apiclientgo.String("JIRA"),
									DatasourcesFilter: []string{
										"JIRA",
									},
									QueryOverridesFacetFilters: apiclientgo.Bool(true),
									FacetFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									FacetFilterSets: []components.FacetFilterSet{
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: apiclientgo.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        apiclientgo.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        apiclientgo.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: apiclientgo.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        apiclientgo.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        apiclientgo.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: apiclientgo.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        apiclientgo.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        apiclientgo.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
									},
									FacetBucketSize: 149825,
									AuthTokens: []components.AuthToken{
										components.AuthToken{
											AccessToken: "123abc",
											Datasource:  "gmail",
											Scope:       apiclientgo.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
											TokenType:   apiclientgo.String("Bearer"),
											AuthUser:    apiclientgo.String("1"),
										},
									},
								},
								Ranges: []components.TextRange{
									components.TextRange{
										StartIndex: 700217,
										Document: &components.Document{
											Metadata: &components.DocumentMetadata{
												Datasource: apiclientgo.String("datasource"),
												ObjectType: apiclientgo.String("Feature Request"),
												Container:  apiclientgo.String("container"),
												ParentID:   apiclientgo.String("JIRA_EN-1337"),
												MimeType:   apiclientgo.String("mimeType"),
												DocumentID: apiclientgo.String("documentId"),
												CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												Components: []string{
													"Backend",
													"Networking",
												},
												Status: apiclientgo.String("[\"Done\"]"),
												Pins: []components.PinDocument{
													components.PinDocument{
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: apiclientgo.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														DocumentID: "<id>",
													},
													components.PinDocument{
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: apiclientgo.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														DocumentID: "<id>",
													},
												},
												Collections: []components.Collection{
													components.Collection{
														Name:        "<value>",
														Description: "about huzzah institute violin aw pillow abnegate memorable",
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: apiclientgo.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 384736,
														Items: []components.CollectionItem{
															components.CollectionItem{
																CollectionID: 670716,
																ItemType:     components.CollectionItemItemTypeURL,
															},
															components.CollectionItem{
																CollectionID: 793957,
																ItemType:     components.CollectionItemItemTypeURL,
															},
														},
													},
													components.Collection{
														Name:        "<value>",
														Description: "trouser twine because unnaturally card gallery among",
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: apiclientgo.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 818393,
													},
													components.Collection{
														Name:        "<value>",
														Description: "zebra ugh exactly pfft once",
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: apiclientgo.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        apiclientgo.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 29269,
													},
												},
												Interactions: &components.DocumentInteractions{
													Reacts: []components.Reaction{
														components.Reaction{},
														components.Reaction{},
														components.Reaction{},
													},
													Shares: []components.Share{
														components.Share{
															NumDaysAgo: 177137,
														},
														components.Share{
															NumDaysAgo: 127401,
														},
													},
												},
												Verification: &components.Verification{
													State: components.StateUnverified,
													Metadata: &components.VerificationMetadata{
														Reminders: []components.Reminder{
															components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 843043,
															},
														},
														LastReminder: &components.Reminder{
															Assignee: components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
															RemindAt: 630893,
														},
													},
												},
												CustomData: map[string]components.CustomDataValue{
													"someCustomField": components.CustomDataValue{},
												},
											},
										},
									},
								},
								InputDetails: &components.SearchRequestInputDetails{
									HasCopyPaste: apiclientgo.Bool(true),
								},
							},
							Results: []components.SearchResult{
								components.SearchResult{
									Title:        apiclientgo.String("title"),
									URL:          "https://example.com/foo/bar",
									NativeAppURL: apiclientgo.String("slack://foo/bar"),
									Snippets: []components.SearchResultSnippet{
										components.SearchResultSnippet{
											Snippet:  "snippet",
											MimeType: apiclientgo.String("mimeType"),
										},
									},
								},
							},
						},
						components.RelatedDocuments{
							QuerySuggestion: &components.QuerySuggestion{
								Query: "app:github type:pull author:mortimer",
								SearchProviderInfo: &components.SearchProviderInfo{
									Name:                  apiclientgo.String("Google"),
									SearchLinkURLTemplate: apiclientgo.String("https://www.google.com/search?q={query}&hl=en"),
								},
								Label:      apiclientgo.String("Mortimer's PRs"),
								Datasource: apiclientgo.String("github"),
								RequestOptions: &components.SearchRequestOptions{
									DatasourceFilter: apiclientgo.String("JIRA"),
									DatasourcesFilter: []string{
										"JIRA",
									},
									QueryOverridesFacetFilters: apiclientgo.Bool(true),
									FacetFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: apiclientgo.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        apiclientgo.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        apiclientgo.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									FacetFilterSets: []components.FacetFilterSet{
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: apiclientgo.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        apiclientgo.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        apiclientgo.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: apiclientgo.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        apiclientgo.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        apiclientgo.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: apiclientgo.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        apiclientgo.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        apiclientgo.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
									},
									FacetBucketSize: 862908,
									AuthTokens: []components.AuthToken{
										components.AuthToken{
											AccessToken: "123abc",
											Datasource:  "gmail",
											Scope:       apiclientgo.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
											TokenType:   apiclientgo.String("Bearer"),
											AuthUser:    apiclientgo.String("1"),
										},
									},
								},
								InputDetails: &components.SearchRequestInputDetails{
									HasCopyPaste: apiclientgo.Bool(true),
								},
							},
						},
					},
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      apiclientgo.String("Actor"),
						Department: apiclientgo.String("Movies"),
						Email:      apiclientgo.String("george@example.com"),
						Location:   apiclientgo.String("Hollywood, CA"),
						Phone:      apiclientgo.String("6505551234"),
						PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{
							Suggestions: []components.QuerySuggestion{
								components.QuerySuggestion{
									Query:      "app:github type:pull author:mortimer",
									Label:      apiclientgo.String("Mortimer's PRs"),
									Datasource: apiclientgo.String("github"),
								},
							},
						},
						InviteInfo: &components.InviteInfo{
							Invites: []components.ChannelInviteInfo{
								components.ChannelInviteInfo{},
								components.ChannelInviteInfo{},
								components.ChannelInviteInfo{},
							},
						},
						CustomFields: []components.CustomFieldData{
							components.CustomFieldData{
								Label: "<value>",
								Values: []components.CustomFieldValue{
									components.CreateCustomFieldValueCustomFieldValueStr(
										components.CustomFieldValueStr{},
									),
									components.CreateCustomFieldValueCustomFieldValueStr(
										components.CustomFieldValueStr{},
									),
								},
							},
						},
						Badges: []components.Badge{
							components.Badge{
								Key:         apiclientgo.String("deployment_name_new_hire"),
								DisplayName: apiclientgo.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    apiclientgo.String("#343CED"),
									Key:      apiclientgo.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     apiclientgo.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleEditor,
			},
		},
		RemovedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      apiclientgo.String("Actor"),
						Department: apiclientgo.String("Movies"),
						Email:      apiclientgo.String("george@example.com"),
						Location:   apiclientgo.String("Hollywood, CA"),
						Phone:      apiclientgo.String("6505551234"),
						PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         apiclientgo.String("deployment_name_new_hire"),
								DisplayName: apiclientgo.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    apiclientgo.String("#343CED"),
									Key:      apiclientgo.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     apiclientgo.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleEditor,
			},
		},
		Roles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      apiclientgo.String("Actor"),
						Department: apiclientgo.String("Movies"),
						Email:      apiclientgo.String("george@example.com"),
						Location:   apiclientgo.String("Hollywood, CA"),
						Phone:      apiclientgo.String("6505551234"),
						PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         apiclientgo.String("deployment_name_new_hire"),
								DisplayName: apiclientgo.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    apiclientgo.String("#343CED"),
									Key:      apiclientgo.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     apiclientgo.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleAnswerModerator,
			},
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      apiclientgo.String("Actor"),
						Department: apiclientgo.String("Movies"),
						Email:      apiclientgo.String("george@example.com"),
						Location:   apiclientgo.String("Hollywood, CA"),
						Phone:      apiclientgo.String("6505551234"),
						PhotoURL:   apiclientgo.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         apiclientgo.String("deployment_name_new_hire"),
								DisplayName: apiclientgo.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    apiclientgo.String("#343CED"),
									Key:      apiclientgo.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     apiclientgo.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleOwner,
			},
		},
		CombinedAnswerText: &components.StructuredTextMutableProperties{
			Text: "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Getanswer(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getanswer")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Client.Answers.Retrieve(ctx, components.GetAnswerRequest{
		ID:    apiclientgo.Int64(3),
		DocID: apiclientgo.String("ANSWERS_answer_3"),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestAnswers_Listanswers(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listanswers")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_API_TOKEN", "value")),
	)

	res, err := s.Client.Answers.List(ctx, components.ListAnswersRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
