// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	apiclientgo "github.com/gleanwork/api-client-go"
	"github.com/gleanwork/api-client-go/internal/utils"
	"github.com/gleanwork/api-client-go/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestTroubleshooting_PostAPIIndexV1DebugDatasourceStatus(t *testing.T) {
	t.Skip("incomplete test found please make sure to address the following errors: [`workflow step post_/api/index/v1/debug/{datasource}/status.test contains criterion simple with invalid condition`, `workflow step post_/api/index/v1/debug/{datasource}/status.test does not contain $contentType successCriteria and required for response body assertion`]")
}

func TestTroubleshooting_PostAPIIndexV1Checkdocumentaccess(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/checkdocumentaccess")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Documents.CheckAccess(ctx, components.CheckDocumentAccessRequest{
		Datasource: "<value>",
		ObjectType: "<value>",
		DocID:      "<id>",
		UserEmail:  "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestTroubleshooting_PostAPIIndexV1Getdocumentstatus(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/getdocumentstatus")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Documents.Status(ctx, components.GetDocumentStatusRequest{
		Datasource: "<value>",
		ObjectType: "<value>",
		DocID:      "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestTroubleshooting_PostAPIIndexV1Getdocumentcount(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/getdocumentcount")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.Documents.Count(ctx, components.GetDocumentCountRequest{
		Datasource: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestTroubleshooting_PostAPIIndexV1Getusercount(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("post_/api/index/v1/getusercount")

	s := apiclientgo.New(
		apiclientgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		apiclientgo.WithClient(testHTTPClient),
		apiclientgo.WithSecurity(utils.GetEnv("GLEAN_BEARER_AUTH", "value")),
	)

	res, err := s.Indexing.People.Count(ctx, components.GetUserCountRequest{
		Datasource: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
