// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"fmt"
)

type ErrorCode string

const (
	ErrorCodeNameExists              ErrorCode = "NAME_EXISTS"
	ErrorCodeNotFound                ErrorCode = "NOT_FOUND"
	ErrorCodeCollectionPinned        ErrorCode = "COLLECTION_PINNED"
	ErrorCodeConcurrentHierarchyEdit ErrorCode = "CONCURRENT_HIERARCHY_EDIT"
	ErrorCodeHeightViolation         ErrorCode = "HEIGHT_VIOLATION"
	ErrorCodeWidthViolation          ErrorCode = "WIDTH_VIOLATION"
	ErrorCodeNoPermissions           ErrorCode = "NO_PERMISSIONS"
)

func (e ErrorCode) ToPointer() *ErrorCode {
	return &e
}
func (e *ErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME_EXISTS":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "COLLECTION_PINNED":
		fallthrough
	case "CONCURRENT_HIERARCHY_EDIT":
		fallthrough
	case "HEIGHT_VIOLATION":
		fallthrough
	case "WIDTH_VIOLATION":
		fallthrough
	case "NO_PERMISSIONS":
		*e = ErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorCode: %v", v)
	}
}

type CollectionError struct {
	ErrorCode ErrorCode `json:"errorCode"`
}

var _ error = &CollectionError{}

func (e *CollectionError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
